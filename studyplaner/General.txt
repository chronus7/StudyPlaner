General Information / Important ToDos:

- we could scratch the UniEvent.EventType and make use of inheritance.. Events could still be listed and grouped by general properties which we would move to an abstract baseclass..
  not sure wether this is necessary though, since there are no big parts of additional information in the subclasses and of course no single extended functionality since these are all just data-containers.
 --- thats the reason why we decided to use EventType... also we may use this in a cool comboBox to let the user decide what to add not build up the same gui several times...
 --- yeah i know, but with seperate classes we could name the properties correct.. but i guess you are right, would take too much time to write multiple GUI elements.. we could still use the combobox tho, 
	 since we would have an abstract baseclass which could be the type of the elements the combobox is showing..
 --- but as you said: there are no differnces between those classes. so why shall we create a bunch of nearly exactly similar classes?

- this explains how to serialize a timespan: http://stackoverflow.com/questions/637933/net-how-to-serialize-a-timespan-to-xml
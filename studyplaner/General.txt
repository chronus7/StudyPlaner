General Information / Important ToDos:

- we could scratch the UniEvent.EventType and make use of inheritance.. Events could still be listed and grouped by general properties which we would move to an abstract baseclass..
  not sure wether this is necessary though, since there are no big parts of additional information in the subclasses and of course no single extended functionality since these are all just data-containers.
 --- thats the reason why we decided to use EventType... also we may use this in a cool comboBox to let the user decide what to add not build up the same gui several times...
 --- yeah i know, but with seperate classes we could name the properties correct.. but i guess you are right, would take too much time to write multiple GUI elements.. we could still use the combobox tho, 
	 since we would have an abstract baseclass which could be the type of the elements the combobox is showing..
 --- but as you said: there are no differnces between those classes. so why shall we create a bunch of nearly exactly similar classes?

- this explains how to serialize a timespan: http://stackoverflow.com/questions/637933/net-how-to-serialize-a-timespan-to-xml
 --- thanks :P

- might need to change Time to a better Name and more important use FirstDate and LastDate. this could also be done as part of a semester class but then these would need to contain the data about their lenght and such


-------------------------
 - I know we got the TODO-feature in VS but this is important: Time misses the Weekday. so if it isn't a fixed date, there should be an extra weekday. I can do this but just for notice :P
  --- isnt this fixed?

 - Moved the Exceptions and EventArgs into a seperate folder/namespace.. might be a better idea to move the whole structure in a feature orientated way and put them in the right namspaces

 - Not sure wether we want to put bool writeTime to settings so the user can decide that..

 ------------------------
 2013-02-13
 - long ago, i know, but there is something really - well - disturbing: you can set the ids of any uni/module/event at any time. but they should only be set by the manager or the deserializer. otherwise the dictonaries will be useless...


-------------------------
--------------------- IDs
My idea:
the event.ID is a combination of the uni's id, module's id and the event's id.
But not just a sum. It should be working with offsets.

Event.ID = dddd ddddd dd
          |----|-----|--|
           uni  module event

so to get the events uni-id, you just calc (uint)(Event.ID / 10^9), for module (uint)(Event.ID / 10^2).

Disadvantages: - additional calc-methods.
               - long/ulong for event.id, because the value will be to high (10^11 possible -- 4*10^9 max of uint, 1,8*10^19 max of ulong)
Advantages: - easier catch of events (hash/index)
            - only one property to save
            - unique ids without necessarily knowing all possible events. just the events of the module are decisive.
The same idea for the module's id:
Module.ID = dddd ddddd
           |----|-----|
            uni  module
GetModule -> Module.ID / 10^4
this one (and the one of the uni) may be uints (10^9 possible -- see above).


_____________________________________________________________

 Sources: 
	- battery icons		www.gentleface.com		- license: http://creativecommons.org/licenses/by-nc/3.0/
	- power cord icon	www.androidicons.com	- license: http://creativecommons.org/licenses/by/3.0/